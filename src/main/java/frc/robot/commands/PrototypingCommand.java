
// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// Hi!

package frc.robot.commands;

import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Robot;
import frc.robot.RobotContainer;
import frc.robot.subsystems.Prototyping;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class PrototypingCommand extends CommandBase {

    private Prototyping prototype;

    private SendableChooser<Integer> leftYChooser;
    private SendableChooser<Integer> leftXChooser;
    private SendableChooser<Integer> rightYChooser;
    private SendableChooser<Integer> rightXChooser;
    private SendableChooser<Integer> triggerChooser;
    private SendableChooser<Integer> bumperChooser;

    private ShuffleboardTab prototypeTab;
    public PrototypingCommand(Prototyping m_prototype){
        prototype = m_prototype;

        leftYChooser = new SendableChooser<Integer>();
        leftXChooser = new SendableChooser<Integer>();
        rightYChooser = new SendableChooser<Integer>();
        rightXChooser = new SendableChooser<Integer>();
        triggerChooser = new SendableChooser<Integer>();
        bumperChooser = new SendableChooser<Integer>();

        prototypeTab = Shuffleboard.getTab("Prototyping");

        
        leftYChooser.setDefaultOption("None", 0);
        leftYChooser.addOption("Spark 4", 4);
        leftYChooser.addOption("Spark 5", 5);
        leftYChooser.addOption("Spark 6", 6);
        leftYChooser.addOption("Spark 7", 7);
        leftYChooser.addOption("Spark 8", 8);
        leftYChooser.addOption("Spark 9", 9);
        
        leftXChooser.setDefaultOption("None", 0);
        leftXChooser.addOption("Spark 4", 4);
        leftXChooser.addOption("Spark 5", 5);
        leftXChooser.addOption("Spark 6", 6);
        leftXChooser.addOption("Spark 7", 7);
        leftXChooser.addOption("Spark 8", 8);
        leftXChooser.addOption("Spark 9", 9);

        rightXChooser.setDefaultOption("None", 0);
        rightXChooser.addOption("Spark 4", 4);
        rightXChooser.addOption("Spark 5", 5);
        rightXChooser.addOption("Spark 6", 6);
        rightXChooser.addOption("Spark 7", 7);
        rightXChooser.addOption("Spark 8", 8);
        rightXChooser.addOption("Spark 9", 9);

        rightYChooser.setDefaultOption("None", 0);
        rightYChooser.addOption("Spark 4", 4);
        rightYChooser.addOption("Spark 5", 5);
        rightYChooser.addOption("Spark 6", 6);
        rightYChooser.addOption("Spark 7", 7);
        rightYChooser.addOption("Spark 8", 8);
        rightYChooser.addOption("Spark 9", 9);

        triggerChooser.setDefaultOption("None", 0);
        triggerChooser.addOption("Spark 4", 4);
        triggerChooser.addOption("Spark 5", 5);
        triggerChooser.addOption("Spark 6", 6);
        triggerChooser.addOption("Spark 7", 7);
        triggerChooser.addOption("Spark 8", 8);
        triggerChooser.addOption("Spark 9", 9);

        bumperChooser.setDefaultOption("None", 0);
        bumperChooser.addOption("Spark 4", 4);
        bumperChooser.addOption("Spark 5", 5);
        bumperChooser.addOption("Spark 6", 6);
        bumperChooser.addOption("Spark 7", 7);
        bumperChooser.addOption("Spark 8", 8);
        bumperChooser.addOption("Spark 9", 9);
                
        prototypeTab.add("Left Y", leftYChooser);         
        prototypeTab.add("Left X", leftXChooser);            
        prototypeTab.add("Right Y", rightYChooser);
        prototypeTab.add("Right X", rightXChooser);            
        prototypeTab.add("Triggers", triggerChooser);            
        prototypeTab.add("Bumpers", bumperChooser);
        

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        prototype.runSpark(leftXChooser.getSelected(), RobotContainer.getInstance().getLeftXAxis());
        prototype.runSpark(leftYChooser.getSelected(), RobotContainer.getInstance().getLeftYAxis());        
        prototype.runSpark(rightXChooser.getSelected(), RobotContainer.getInstance().getRightXAxis());        
        prototype.runSpark(rightYChooser.getSelected(), RobotContainer.getInstance().getRightYAxis());        
        if(RobotContainer.getInstance().getRightTrigger() > RobotContainer.getInstance().getLeftTrigger()){
            prototype.runSpark(triggerChooser.getSelected(), RobotContainer.getInstance().getRightTrigger());
        }else{
            prototype.runSpark(triggerChooser.getSelected(), RobotContainer.getInstance().getLeftTrigger());
        }
        if(RobotContainer.getInstance().getRightBumper()){
            prototype.runSpark(bumperChooser.getSelected(), 1);
        }else if(RobotContainer.getInstance().getLeftBumper()){
            prototype.runSpark(bumperChooser.getSelected(), -1);
        }else{
            prototype.runSpark(bumperChooser.getSelected(), 0);
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        prototype.runSpark(leftXChooser.getSelected(), 0);
        prototype.runSpark(leftYChooser.getSelected(), 0);        
        prototype.runSpark(rightXChooser.getSelected(), 0);        
        prototype.runSpark(rightYChooser.getSelected(), 0);
        prototype.runSpark(triggerChooser.getSelected(), 0);
        prototype.runSpark(bumperChooser.getSelected(), 0);
    }

    
    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
