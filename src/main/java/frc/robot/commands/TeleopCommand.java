// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// Hi!


package frc.robot.commands;
import java.util.Map;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import java.awt.Color;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Drive;
import frc.robot.subsystems.Lights;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TeleopCommand extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Drive m_drive;
        private final Lights m_lights;
        public NetworkTableEntry custom_red;
        public NetworkTableEntry custom_green;
        public NetworkTableEntry custom_blue;
        public NetworkTableEntry custom_toggle;
        public NetworkTableEntry alliance_input;
        private SendableChooser alliance_chooser;
        private double timer;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public TeleopCommand(Drive subsystem, Lights lightSystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drive = subsystem;
        m_lights = lightSystem;
        addRequirements(m_drive);

        custom_red = Shuffleboard.getTab("Lights").add("Custom Color Red", 1f).withWidget(BuiltInWidgets.kNumberSlider).withProperties(Map.of("min", 0f, "max", 1f)).getEntry();
        custom_green = Shuffleboard.getTab("Lights").add("Custom Color Green", 1f).withWidget(BuiltInWidgets.kNumberSlider).withProperties(Map.of("min", 0f, "max", 1f)).getEntry();
        custom_blue = Shuffleboard.getTab("Lights").add("Custom Color Blue", 1f).withWidget(BuiltInWidgets.kNumberSlider).withProperties(Map.of("min", 0f, "max", 1f)).getEntry();
        custom_toggle = Shuffleboard.getTab("Lights").add("Use Custom Color?", true).withWidget(BuiltInWidgets.kToggleSwitch).getEntry();

        alliance_chooser = new SendableChooser<String>();
        alliance_chooser.setDefaultOption("Red", "red");
        alliance_chooser.addOption("Blue", "blue");

        timer = 0f;



        Shuffleboard.getTab("Lights").add("Alliance Color", alliance_chooser);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        timer += Constants.LightSpeed = 0.1;
        //driving
         double[] sticks = new double[] {RobotContainer.getInstance().getYAxis(Hand.kLeft), RobotContainer.getInstance().getYAxis(Hand.kRight)};
        m_drive.tankDrive(sticks[0], sticks[1]);

        if(custom_toggle.getBoolean(true)){
            m_lights.setColors(new Color((float)custom_red.getDouble(1), (float)custom_green.getDouble(1), (float)custom_blue.getDouble(1)), Constants.LightBank, 1);
        }else{
            if(alliance_chooser.getSelected() == "red"){
                m_lights.setColors(Constants.allianceRedColor, 1, (float)Math.abs(Math.sin(timer)));
            }else{
                m_lights.setColors(Constants.allianceBlueColor, 1, (float)Math.abs(Math.sin(timer)));
            }
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
