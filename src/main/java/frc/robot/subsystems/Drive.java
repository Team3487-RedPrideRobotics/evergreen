// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;


public class Drive extends SubsystemBase {
    private Spark leftFront;
    private Spark leftBack;
    private Spark rightFront;
    private Spark rightBack;
    private SpeedControllerGroup leftDrive;
    private SpeedControllerGroup rightDrive;
    private DifferentialDrive driveBase;

    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFront = new Spark(Constants.leftDriveFront);
        leftBack = new Spark(Constants.leftDriveBack);
        leftDrive = new SpeedControllerGroup(leftFront, leftBack);

        rightFront = new Spark(Constants.rightDriveFront);
        rightBack = new Spark(Constants.rightDriveBack);
        rightDrive = new SpeedControllerGroup(rightFront, rightBack);

        driveBase = new DifferentialDrive(leftDrive, rightDrive);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void tankDrive(double left, double right){
        driveBase.tankDrive(left, right);
    }

}

