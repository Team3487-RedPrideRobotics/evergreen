// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Encoder;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;



// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark leftDrive;
    private Spark rightDrive;
    private DifferentialDrive driveBase;
    private Encoder leftEncoder;
    private Encoder rightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftDrive = new Spark(Constants.leftDrivePort);
        leftDrive.setInverted(Constants.leftDriveInverted);

        rightDrive = new Spark(Constants.rightDrivePoint);
        rightDrive.setInverted(Constants.rightDriveInverted);
        driveBase = new DifferentialDrive(leftDrive, rightDrive);

        leftEncoder = new Encoder(Constants.leftEncoderPort[0], Constants.leftEncoderPort[1]);
        rightEncoder = new Encoder(Constants.rightEncoderPort[0], Constants.rightEncoderPort[1]);
        leftEncoder.setDistancePerPulse(Math.PI*Constants.whd/Constants.cpr);
        rightEncoder.setDistancePerPulse(Math.PI*Constants.whd/Constants.cpr);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void tankDrive(double left, double right){
        driveBase.tankDrive(left, right);
    }

    public void resetEncoders(){
        leftEncoder.reset();
        rightEncoder.reset();
    }

    public double[] encoderValues(){
        double[] encoderArray = {leftEncoder.getDistance(), rightEncoder.getDistance()};
        return encoderArray;
    }

}

