// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import java.util.Map;

import edu.wpi.first.networktables.NetworkTableEntry;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;



// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Prototyping extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark spark4;
    private Spark spark5;
    private Spark spark6;
    private Spark spark7;
    private Spark spark8;
    private Spark spark9;
    private Spark spark10;

    public SendableChooser<Spark> motorChooser;
    public NetworkTableEntry speedSlider;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Prototyping() {
        spark4 = new Spark(4);
        spark5 = new Spark(5);
        spark6 = new Spark(6);
        spark7 = new Spark(7);
        spark8 = new Spark(8);
        spark9 = new Spark(9);
        spark10 = new Spark(10);

        motorChooser = new SendableChooser<Spark>();

        motorChooser.setDefaultOption("None", null);
        motorChooser.addOption("Spark 4", spark4);
        motorChooser.addOption("Spark 5", spark5);
        motorChooser.addOption("Spark 6", spark6);
        motorChooser.addOption("Spark 7", spark7);
        motorChooser.addOption("Spark 8", spark8);
        motorChooser.addOption("Spark 9", spark9);
        motorChooser.addOption("Spark 10", spark10);

        Shuffleboard.getTab("Prototyping").add("Spark", motorChooser);

        speedSlider = Shuffleboard.getTab("Prototyping").add("Speed", Constants.prototypeSpeed).withWidget(BuiltInWidgets.kNumberSlider).withProperties(Map.of("min", 0, "max", 1)).getEntry();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void runPrototype(Boolean reversed){
        if (motorChooser.getSelected() != null) {
            motorChooser.getSelected().set(reversed? -speedSlider.getDouble(Constants.prototypeSpeed): speedSlider.getDouble(Constants.prototypeSpeed));   
        }
    }

	public void stopPrototype() {
        if (motorChooser.getSelected() != null) {
            motorChooser.getSelected().set(0);   
        }
	}

}

