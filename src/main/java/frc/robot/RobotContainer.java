// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.commands.AutonomousCommand;
import frc.robot.commands.PrototypingCommand;
import frc.robot.commands.TeleopCommand;
import frc.robot.subsystems.Drive;
import frc.robot.subsystems.Prototyping;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

private XboxController xinput = new XboxController(0);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Drive m_drive = new Drive();
    private final Prototyping m_prototype = new Prototyping();
    
    public TeleopCommand m_teleopCommand = new TeleopCommand(m_drive);
    public AutonomousCommand m_autonomousCommand = new AutonomousCommand(m_drive);

// Joysticks

private PrototypingCommand m_prototypingCommand = new PrototypingCommand(m_prototype);

private NetworkTableEntry prototypeEntry;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        prototypeEntry = Shuffleboard.getTab("Prototyping").add("Prototype Mode", false).withWidget(BuiltInWidgets.kToggleSwitch).getEntry();
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getXinput() {
      return xinput;
    }

    public double getLeftYAxis(){
      if(xinput == null){
        return 0;
      }
      if(Math.abs(xinput.getLeftY()) > Constants.deadzone){
        return xinput.getLeftY();
      }
      return 0;
    }

    public double getRightYAxis(){

      if(xinput == null){
        return 0;
      }
      if(Math.abs(xinput.getRightY()) > Constants.deadzone){
        return xinput.getRightY();
      }
      return 0;
    }

public double getLeftXAxis(){
      if(xinput == null){
        return 0;
      }
      if(Math.abs(xinput.getLeftX()) > Constants.deadzone){
        return xinput.getLeftX();
      }
      return 0;
    }

    public double getRightXAxis(){
      if(xinput == null){
        return 0;
      }
      if(Math.abs(xinput.getRightX()) > Constants.deadzone){
        return xinput.getRightX();
      }
      return 0;
    }
    
public double getLeftTrigger(){
      if(xinput == null){
        return 0;
      }
      if(Math.abs(xinput.getLeftTriggerAxis()) > Constants.deadzone){
        return xinput.getLeftTriggerAxis();
      }
      return 0;
    }

    public double getRightTrigger(){
      if(Math.abs(xinput.getRightTriggerAxis()) > Constants.deadzone){
        return xinput.getRightTriggerAxis();
      }
      return 0;
    }


public boolean getLeftBumper(){
      if(xinput == null){
        return false;
      }
      return xinput.getLeftBumper();
    }

    public boolean getRightBumper(){
      if(xinput == null){
        return false;
      }
        return xinput.getRightBumper();
    }
    
    
    public Command getTeleopCommand() {
      if(prototypeEntry.getBoolean(false)){
        return m_prototypingCommand;
      }
      return m_teleopCommand;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_autonomousCommand;
  }

  public Command getTestCommand() {
    return m_prototypingCommand;
  }
  

}

